# LECTURE 3/12
# calculate the amount of forest loss (land cover=everything that covers the soil)
library(raster)
rlist <- list.files(pattern = "defor")
list_rast <- lapply(rlist, brick)  # brick to import all layers of a image
# we don't make a stack cause we want to keep the two images separated for reason of comparison
plotRGB(list_rast[[1]], r=1, g=2, b=3, strecth="Lin")   # defor: NIR 1, red 2, green 3, everything will become red since we placed the most reflected
# , which is NIR, into the red band. Image is from the Earth observatory
l1992 <- list_rast[[1]]
l2006 <- list_rast[[2]]
plotRGB(l1992, stretch="Lin")
plotRGB(l2006, stretch="Lin")
# in the images we have different land covers (forest, agricolture, etc.) and we distinguish them by their different reflectance, 
# we can tell R to distinguish and classify them (ex. attribute at a certain reflectance value, a certain type of land cover name)
# we do this by RSToolbox, by unsuperClass function. Inside the object created there is a map with two possible values in this case
# cause I specified 2 classes in the unsuperClass function

library(raster)
library(ggplot2)
library(RStoolbox)
rlist <- list.files(pattern = "defor")
list_rast <- lapply(rlist, brick)

plot(list_rast[[1]])
l1992 <- list_rast[[1]]
plotRGB(l1992, r=1, g=2, b=3, stretch = "Lin") # plotRGB to plot in red, blue and green
l2006 <- (list_rast[[2]])
plotRGB(l2006, r=1, g=2, b=3, stretch = "Lin")

# unsupervised classification, we have an original image with pixels where forest and other parts can be seen by us humans
# we need to explain to the software what we discern as humans = that is a forest, that is a field
# we use the different values in reflectance to communicate that to the software
l1992c <- unsuperClass(l1992, nClasses = 2)  #unsuperClass(x, nClasses)
# Check out hot themes DUCCIO, one interesting with PCA analysis
plot(l1992c$map)   # value 1 = non forest, value 2 = forest
# let's generate frequency table with freq on map of object l1992c, I get the number of pixels belonging to class 1 and 2
freq(l1992c$map) # ow many pixels in the "map" (or image) are of value 1 = forest? to discover I use the freq function, generating a
# frequency table
l2006c <- unsuperClass(l2006, nClasses = 2)  
plot(l2006c$map)
freq(l2006c$map)
total <- 35155 + 306137
total
prop_agricolture_1992 <- 35155/total
prop_agricolture_1992
prop_forest_1992 <- 306137/total
prop_forest_1992

prop_agricolture_2006 <- 164612/total
prop_forest_2006 <- 178114/total
cover <- c("Forest", "Agricolture")
prop1992 <- c(prop_forest_1992, prop_agricolture_1992)
proportion_1992 <- data.frame(cover, prop1992)
prop2006 <- c(prop_forest_2006, prop_agricolture_2006)
proportion_2006 <- data.frame(cover, prop2006)
# geom_bar in ggplot2 for making a barchart, ggplot2 has peculiar synthax; identity in stat is simply taking the numbers as they are
# fill to state which color we want inside the bars
p1 <- ggplot(proportion_1992, aes(x=cover, y=prop1992, color = cover)) + geom_bar(stat = "identity", fill = "white") +  ylim(0,1)
p2 <- ggplot(proportion_2006, aes(x=cover, y=prop2006, color = cover)) + geom_bar(stat = "identity", fill = "white") +  ylim(0,1)
proportion <- data.frame(prop1992, prop2006, cover)

# LECTURE 6/12

Data (defor 1 and 2) is from Earth Observatory
# we have a image with pixels and we are seeing that some are forests and some agricoltural areas, we should explain R
# that the forest is what we see in red in the picture -> make use of reflectance value to let R understand
plotRGB(l1992, r=1, g=2, b=3, stretch = "Lin")
# Classification of the file by unsupervised classification, unsupervised means we only tell the program the number of classes.
# Supervised classification instead requires us to find out the classes, and not the software figuring that out itself
l1992c <- unsuperClass(l1992, nClasses=2)   # unsuperClass(x, nClasses)
l1992c
# Raster layer is a single layer, RasterBrick is made of multiple RasterLayers.
# Unsuperclass object has a number of values equal to the number of classes we decided
# to call the values of the UnsuperClass object use $map
plot(1992c$map)
freq(1992c$map)
total <- 341292
propagri <- 34710/total
propforest <- 306582/total
cover <- c("Forest", "Agricolture")
prop1992 <- c(propforest, propagri)
proportion1992 <- data.frame(cover, prop1992)
ggplot equal to lecture 3/12, uses stat="identity" which means that for the statistic we are just going to use the numbers
l2006c <- unsuperClass(l2006, nClasses = 2)
l2006c
plot(l2006c$map)
freq(l2006c$map)

install.packages("gridExtra") # similar as par(), we use it here on ggplot graphs
library(gridExtra)
grid.arrange(p1, p2, nrow = 1) # puts several graphs in the same multiframe

library(patchwork)

p1+p2    #get same result but with simpler syntax
p1/p2    #one graph on top of the other

l1992 <- list_rast[[1]]
l1992
plotRGB(l1992, r=1, g=2, b=3, stretch = "Lin")
ggRGB(l1992, r=1, g=2, b=3)
gp1 <- ggRGB(l1992, r=1, g=2, b=3, stretch = "Lin")
gp2 <- ggRGB(l1992, r=1, g=2, b=3, stretch = "hist")
gp3 <- ggRGB(l1992, r=1, g=2, b=3, stretch = "sqrt")
gp4 <- ggRGB(l1992, r=1, g=2, b=3, stretch = "log")   #is natural log, not log in base 10
gp1+gp2+gp3+gp4

#multitemporal patchwork
l2006 <- list_rast[[2]]
gp1 <- ggRGB(l1992, r=1, g=2, b=3)
gp5 <- ggRGB(l2006, r=1, g=2, b=3)
gp1+gp5
gp1/gp5
